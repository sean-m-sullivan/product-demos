---
- name: FIND AMI DETAILS
  ec2_ami_facts:
    region: "{{ ec2_region }}"
    owners: "{{ ec2_info[rhel].owners }}"
    filters:
      name: "{{ ec2_info[rhel].filter }}"
      architecture: "{{ ec2_info[rhel].architecture }}"
  register: amis
  delegate_to: localhost

- name: SAVE  AMI DETAILS
  set_fact:
    node_ami: >
      {{ amis.images | selectattr('name', 'defined') | sort(attribute='creation_date') | last }}
  delegate_to: localhost

- name: GATHER SUBNET ID
  ec2_vpc_subnet_facts:
    region: "{{ ec2_region }}"
    filters:
      "tag:demo_name": "{{ ec2_name_prefix }}"
  register: subnet_id
  run_once: yes
  delegate_to: localhost


- name: REGISTER THE SUBNET ID
  set_fact:
    ec2_vpc_subnet_id: "{{ subnet_id.subnets[0].subnet_id }}"
  run_once: yes
  delegate_to: localhost


- name: CREATE EC2 INSTANCES
  ec2:
    assign_public_ip: yes
    key_name: "{{ ec2_name_prefix }}-key"
    group: "{{ ec2_security_group }}"
    instance_type: "{{ ec2_info[rhel].size }}"
    image: "{{ node_ami.image_id }}"
    region: "{{ ec2_region }}"
    instance_tags:
      demo_name: "{{ ec2_name_prefix }}"
      Name: "{{ inventory_hostname }}"
      server_type: webserver
      demo_tag: webhook
    wait: "{{ ec2_wait }}"
    vpc_subnet_id: "{{ ec2_vpc_subnet_id }}"
    volumes:
      - device_name: /dev/sda1
        volume_type: gp2
        volume_size: "{{ ec2_info[rhel].disk_space }}"
        delete_on_termination: true
    count_tag:
      Name: "{{ inventory_hostname }}"
    exact_count: 1

  #register: node_output
  delegate_to: localhost
